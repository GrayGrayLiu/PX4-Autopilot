// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_body_vel_innov_var_and_hx
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix24_24
 *     R: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     innov_var: Matrix21
 *     Hx: Matrix24_1
 */
template <typename Scalar>
void ComputeBodyVelInnovVarAndHx(const matrix::Matrix<Scalar, 24, 1>& state,
                                 const matrix::Matrix<Scalar, 24, 24>& P, const Scalar R,
                                 const Scalar epsilon,
                                 matrix::Matrix<Scalar, 2, 1>* const innov_var = nullptr,
                                 matrix::Matrix<Scalar, 24, 1>* const Hx = nullptr) {
  // Total ops: 265

  // Unused inputs
  (void)epsilon;

  // Input arrays

  // Intermediate terms (28)
  const Scalar _tmp0 = 2 * state(5, 0);
  const Scalar _tmp1 = 2 * state(3, 0) * state(6, 0);
  const Scalar _tmp2 = _tmp0 * state(2, 0) + _tmp1;
  const Scalar _tmp3 = 2 * state(0, 0);
  const Scalar _tmp4 = 2 * state(1, 0);
  const Scalar _tmp5 = _tmp3 * state(2, 0) + _tmp4 * state(3, 0);
  const Scalar _tmp6 = _tmp3 * state(3, 0);
  const Scalar _tmp7 = _tmp4 * state(2, 0);
  const Scalar _tmp8 = -_tmp6 + _tmp7;
  const Scalar _tmp9 = 1 - 2 * std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp10 = _tmp9 - 2 * std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp11 = 2 * state(2, 0);
  const Scalar _tmp12 = _tmp11 * state(6, 0);
  const Scalar _tmp13 = -_tmp0 * state(3, 0) + _tmp12;
  const Scalar _tmp14 = 4 * state(4, 0);
  const Scalar _tmp15 = _tmp3 * state(6, 0);
  const Scalar _tmp16 = -_tmp14 * state(2, 0) + _tmp15 + _tmp4 * state(5, 0);
  const Scalar _tmp17 = _tmp4 * state(6, 0);
  const Scalar _tmp18 = -_tmp0 * state(0, 0) - _tmp14 * state(3, 0) + _tmp17;
  const Scalar _tmp19 = _tmp6 + _tmp7;
  const Scalar _tmp20 = _tmp11 * state(3, 0) - _tmp4 * state(0, 0);
  const Scalar _tmp21 = _tmp9 - 2 * std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp22 = 2 * state(4, 0);
  const Scalar _tmp23 = -_tmp17 + _tmp22 * state(3, 0);
  const Scalar _tmp24 = _tmp1 + _tmp4 * state(4, 0);
  const Scalar _tmp25 = 4 * state(5, 0);
  const Scalar _tmp26 = -_tmp15 + _tmp22 * state(2, 0) - _tmp25 * state(1, 0);
  const Scalar _tmp27 = _tmp12 + _tmp22 * state(0, 0) - _tmp25 * state(3, 0);

  // Output terms (2)
  if (innov_var != nullptr) {
    matrix::Matrix<Scalar, 2, 1>& _innov_var = (*innov_var);

    _innov_var(0, 0) =
        R +
        _tmp10 * (P(0, 4) * _tmp13 + P(1, 4) * _tmp2 + P(2, 4) * _tmp16 + P(3, 4) * _tmp18 +
                  P(4, 4) * _tmp10 + P(5, 4) * _tmp8 + P(6, 4) * _tmp5) +
        _tmp13 * (P(0, 0) * _tmp13 + P(1, 0) * _tmp2 + P(2, 0) * _tmp16 + P(3, 0) * _tmp18 +
                  P(4, 0) * _tmp10 + P(5, 0) * _tmp8 + P(6, 0) * _tmp5) +
        _tmp16 * (P(0, 2) * _tmp13 + P(1, 2) * _tmp2 + P(2, 2) * _tmp16 + P(3, 2) * _tmp18 +
                  P(4, 2) * _tmp10 + P(5, 2) * _tmp8 + P(6, 2) * _tmp5) +
        _tmp18 * (P(0, 3) * _tmp13 + P(1, 3) * _tmp2 + P(2, 3) * _tmp16 + P(3, 3) * _tmp18 +
                  P(4, 3) * _tmp10 + P(5, 3) * _tmp8 + P(6, 3) * _tmp5) +
        _tmp2 * (P(0, 1) * _tmp13 + P(1, 1) * _tmp2 + P(2, 1) * _tmp16 + P(3, 1) * _tmp18 +
                 P(4, 1) * _tmp10 + P(5, 1) * _tmp8 + P(6, 1) * _tmp5) +
        _tmp5 * (P(0, 6) * _tmp13 + P(1, 6) * _tmp2 + P(2, 6) * _tmp16 + P(3, 6) * _tmp18 +
                 P(4, 6) * _tmp10 + P(5, 6) * _tmp8 + P(6, 6) * _tmp5) +
        _tmp8 * (P(0, 5) * _tmp13 + P(1, 5) * _tmp2 + P(2, 5) * _tmp16 + P(3, 5) * _tmp18 +
                 P(4, 5) * _tmp10 + P(5, 5) * _tmp8 + P(6, 5) * _tmp5);
    _innov_var(1, 0) =
        R +
        _tmp19 * (P(0, 4) * _tmp23 + P(1, 4) * _tmp26 + P(2, 4) * _tmp24 + P(3, 4) * _tmp27 +
                  P(4, 4) * _tmp19 + P(5, 4) * _tmp21 + P(6, 4) * _tmp20) +
        _tmp20 * (P(0, 6) * _tmp23 + P(1, 6) * _tmp26 + P(2, 6) * _tmp24 + P(3, 6) * _tmp27 +
                  P(4, 6) * _tmp19 + P(5, 6) * _tmp21 + P(6, 6) * _tmp20) +
        _tmp21 * (P(0, 5) * _tmp23 + P(1, 5) * _tmp26 + P(2, 5) * _tmp24 + P(3, 5) * _tmp27 +
                  P(4, 5) * _tmp19 + P(5, 5) * _tmp21 + P(6, 5) * _tmp20) +
        _tmp23 * (P(0, 0) * _tmp23 + P(1, 0) * _tmp26 + P(2, 0) * _tmp24 + P(3, 0) * _tmp27 +
                  P(4, 0) * _tmp19 + P(5, 0) * _tmp21 + P(6, 0) * _tmp20) +
        _tmp24 * (P(0, 2) * _tmp23 + P(1, 2) * _tmp26 + P(2, 2) * _tmp24 + P(3, 2) * _tmp27 +
                  P(4, 2) * _tmp19 + P(5, 2) * _tmp21 + P(6, 2) * _tmp20) +
        _tmp26 * (P(0, 1) * _tmp23 + P(1, 1) * _tmp26 + P(2, 1) * _tmp24 + P(3, 1) * _tmp27 +
                  P(4, 1) * _tmp19 + P(5, 1) * _tmp21 + P(6, 1) * _tmp20) +
        _tmp27 * (P(0, 3) * _tmp23 + P(1, 3) * _tmp26 + P(2, 3) * _tmp24 + P(3, 3) * _tmp27 +
                  P(4, 3) * _tmp19 + P(5, 3) * _tmp21 + P(6, 3) * _tmp20);
  }

  if (Hx != nullptr) {
    matrix::Matrix<Scalar, 24, 1>& _hx = (*Hx);

    _hx.setZero();

    _hx(0, 0) = _tmp13;
    _hx(1, 0) = _tmp2;
    _hx(2, 0) = _tmp16;
    _hx(3, 0) = _tmp18;
    _hx(4, 0) = _tmp10;
    _hx(5, 0) = _tmp8;
    _hx(6, 0) = _tmp5;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
