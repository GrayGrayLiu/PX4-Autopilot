// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_body_y_vel_innov_var_and_h
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix24_24
 *     R: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     innov_var: Scalar
 *     H: Matrix24_1
 */
template <typename Scalar>
void ComputeBodyYVelInnovVarAndH(const matrix::Matrix<Scalar, 24, 1>& state,
                                 const matrix::Matrix<Scalar, 24, 24>& P, const Scalar R,
                                 const Scalar epsilon, Scalar* const innov_var = nullptr,
                                 matrix::Matrix<Scalar, 24, 1>* const H = nullptr) {
  // Total ops: 138

  // Unused inputs
  (void)epsilon;

  // Input arrays

  // Intermediate terms (12)
  const Scalar _tmp0 = 2 * state(3, 0);
  const Scalar _tmp1 = 2 * state(1, 0);
  const Scalar _tmp2 = _tmp0 * state(0, 0) + _tmp1 * state(2, 0);
  const Scalar _tmp3 = _tmp0 * state(2, 0) - _tmp1 * state(0, 0);
  const Scalar _tmp4 =
      -2 * std::pow(state(1, 0), Scalar(2)) - 2 * std::pow(state(3, 0), Scalar(2)) + 1;
  const Scalar _tmp5 = 2 * state(4, 0);
  const Scalar _tmp6 = -_tmp1 * state(6, 0) + _tmp5 * state(3, 0);
  const Scalar _tmp7 = _tmp0 * state(6, 0) + _tmp5 * state(1, 0);
  const Scalar _tmp8 = 4 * state(5, 0);
  const Scalar _tmp9 = 2 * state(6, 0);
  const Scalar _tmp10 = _tmp5 * state(2, 0) - _tmp8 * state(1, 0) - _tmp9 * state(0, 0);
  const Scalar _tmp11 = _tmp5 * state(0, 0) - _tmp8 * state(3, 0) + _tmp9 * state(2, 0);

  // Output terms (2)
  if (innov_var != nullptr) {
    Scalar& _innov_var = (*innov_var);

    _innov_var = R +
                 _tmp10 * (P(0, 1) * _tmp6 + P(1, 1) * _tmp10 + P(2, 1) * _tmp7 + P(3, 1) * _tmp11 +
                           P(4, 1) * _tmp2 + P(5, 1) * _tmp4 + P(6, 1) * _tmp3) +
                 _tmp11 * (P(0, 3) * _tmp6 + P(1, 3) * _tmp10 + P(2, 3) * _tmp7 + P(3, 3) * _tmp11 +
                           P(4, 3) * _tmp2 + P(5, 3) * _tmp4 + P(6, 3) * _tmp3) +
                 _tmp2 * (P(0, 4) * _tmp6 + P(1, 4) * _tmp10 + P(2, 4) * _tmp7 + P(3, 4) * _tmp11 +
                          P(4, 4) * _tmp2 + P(5, 4) * _tmp4 + P(6, 4) * _tmp3) +
                 _tmp3 * (P(0, 6) * _tmp6 + P(1, 6) * _tmp10 + P(2, 6) * _tmp7 + P(3, 6) * _tmp11 +
                          P(4, 6) * _tmp2 + P(5, 6) * _tmp4 + P(6, 6) * _tmp3) +
                 _tmp4 * (P(0, 5) * _tmp6 + P(1, 5) * _tmp10 + P(2, 5) * _tmp7 + P(3, 5) * _tmp11 +
                          P(4, 5) * _tmp2 + P(5, 5) * _tmp4 + P(6, 5) * _tmp3) +
                 _tmp6 * (P(0, 0) * _tmp6 + P(1, 0) * _tmp10 + P(2, 0) * _tmp7 + P(3, 0) * _tmp11 +
                          P(4, 0) * _tmp2 + P(5, 0) * _tmp4 + P(6, 0) * _tmp3) +
                 _tmp7 * (P(0, 2) * _tmp6 + P(1, 2) * _tmp10 + P(2, 2) * _tmp7 + P(3, 2) * _tmp11 +
                          P(4, 2) * _tmp2 + P(5, 2) * _tmp4 + P(6, 2) * _tmp3);
  }

  if (H != nullptr) {
    matrix::Matrix<Scalar, 24, 1>& _h = (*H);

    _h.setZero();

    _h(0, 0) = _tmp6;
    _h(1, 0) = _tmp10;
    _h(2, 0) = _tmp7;
    _h(3, 0) = _tmp11;
    _h(4, 0) = _tmp2;
    _h(5, 0) = _tmp4;
    _h(6, 0) = _tmp3;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
